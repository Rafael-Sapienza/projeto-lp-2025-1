

-----------------------------------------
            counter: 17


Exec Block:

Statement: Block([FuncDef(Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }), VarDeclaration("resultado", CInt(0)), Assignment("resultado", FuncCall("fatorial", [CInt(5)])), Print(CString("resultado:")), Print(Var("resultado"))])

Env: Environment { id: 1, stack_len: 0, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [] }



-----------------------------------------
            counter: 18


In function execute_block:

All statements: [FuncDef(Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }), VarDeclaration("resultado", CInt(0)), Assignment("resultado", FuncCall("fatorial", [CInt(5)])), Print(CString("resultado:")), Print(Var("resultado"))]

Env: Environment { id: 1, stack_len: 0, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [] }



-----------------------------------------
            counter: 20


In function execute_block:

Single Statement: FuncDef(Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) })

Env: Environment { id: 1, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }] }



-----------------------------------------
            counter: 21


Exec FuncDef:

Statement: FuncDef(Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) })

Env: Environment { id: 1, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }] }



-----------------------------------------
            counter: 23


In function execute_block:

Single Statement: VarDeclaration("resultado", CInt(0))

Env: Environment { id: 1, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 24


Exec VarDeclaration:

Statement: VarDeclaration("resultado", CInt(0))

Env: Environment { id: 1, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 26


In function execute_block:

Single Statement: Assignment("resultado", FuncCall("fatorial", [CInt(5)]))

Env: Environment { id: 1, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(0))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 27


Exec Assignement:

Statement: Assignment("resultado", FuncCall("fatorial", [CInt(5)]))

Env: Environment { id: 1, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(0))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 36


Exec Block:

Statement: Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])

Env: Environment { id: 2, stack_len: 2, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 37


In function execute_block:

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env: Environment { id: 2, stack_len: 2, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 39


In function execute_block:

Single Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 2, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 40


Exec VarDeclaration:

Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 2, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 42


In function execute_block:

Single Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 2, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 43


Exec IfThenElse:

Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 2, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 46


In function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 2, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 48


In function execute_block:

Single Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 2, stack_len: 4, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 49


Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 2, stack_len: 4, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 61


Exec Block:

Statement: Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])

Env: Environment { id: 3, stack_len: 5, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 62


In function execute_block:

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env: Environment { id: 3, stack_len: 5, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 64


In function execute_block:

Single Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 3, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 65


Exec VarDeclaration:

Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 3, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 67


In function execute_block:

Single Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 3, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 68


Exec IfThenElse:

Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 3, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 71


In function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 3, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 73


In function execute_block:

Single Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 3, stack_len: 7, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 74


Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 3, stack_len: 7, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 86


Exec Block:

Statement: Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])

Env: Environment { id: 4, stack_len: 8, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 87


In function execute_block:

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env: Environment { id: 4, stack_len: 8, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 89


In function execute_block:

Single Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 4, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 90


Exec VarDeclaration:

Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 4, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 92


In function execute_block:

Single Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 4, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 93


Exec IfThenElse:

Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 4, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 96


In function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 4, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 98


In function execute_block:

Single Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 4, stack_len: 10, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 99


Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 4, stack_len: 10, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 111


Exec Block:

Statement: Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])

Env: Environment { id: 5, stack_len: 11, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 112


In function execute_block:

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env: Environment { id: 5, stack_len: 11, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 114


In function execute_block:

Single Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 5, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 115


Exec VarDeclaration:

Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 5, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 117


In function execute_block:

Single Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 5, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 118


Exec IfThenElse:

Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 5, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 121


In function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 5, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 123


In function execute_block:

Single Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 5, stack_len: 13, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 124


Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 5, stack_len: 13, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 136


Exec Block:

Statement: Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])

Env: Environment { id: 6, stack_len: 14, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 137


In function execute_block:

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env: Environment { id: 6, stack_len: 14, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 139


In function execute_block:

Single Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 6, stack_len: 15, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 140


Exec VarDeclaration:

Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 6, stack_len: 15, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 142


In function execute_block:

Single Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 6, stack_len: 15, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 143


Exec IfThenElse:

Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 6, stack_len: 15, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 146


In function execute_block:

All statements: [Assignment("m", CInt(1))]

Env: Environment { id: 6, stack_len: 15, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 148


In function execute_block:

Single Statement: Assignment("m", CInt(1))

Env: Environment { id: 6, stack_len: 16, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 149


Exec Assignement:

Statement: Assignment("m", CInt(1))

Env: Environment { id: 6, stack_len: 16, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 150


Finishing Exec Assignement:

Statement: Assignment("m", CInt(1))

Env: Environment { id: 6, stack_len: 16, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 152


Exiting function execute_block:

All statements: [Assignment("m", CInt(1))]

Env: Environment { id: 6, stack_len: 16, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

Env is about to be popped



-----------------------------------------
            counter: 154


In function execute_block:

Single Statement: Return(Var("m"))

Env: Environment { id: 6, stack_len: 15, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 155


Exec Return from function: fatorial

Statement: Return(Var("m"))

Env: Environment { id: 6, stack_len: 15, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 157


Finishing Return from function: fatorial

Return result: CInt(1)



-----------------------------------------
            counter: 158


In function execute_block:

Returning from function fatorial ...

Return result: CInt(1)

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env is about to be popped



-----------------------------------------
            counter: 160


Finishing Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 5, stack_len: 13, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 162


Exiting function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 5, stack_len: 13, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

Env is about to be popped



-----------------------------------------
            counter: 164


In function execute_block:

Single Statement: Return(Var("m"))

Env: Environment { id: 5, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 165


Exec Return from function: fatorial

Statement: Return(Var("m"))

Env: Environment { id: 5, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 167


Finishing Return from function: fatorial

Return result: CInt(2)



-----------------------------------------
            counter: 168


In function execute_block:

Returning from function fatorial ...

Return result: CInt(2)

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env is about to be popped



-----------------------------------------
            counter: 170


Finishing Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 4, stack_len: 10, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 172


Exiting function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 4, stack_len: 10, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

Env is about to be popped



-----------------------------------------
            counter: 174


In function execute_block:

Single Statement: Return(Var("m"))

Env: Environment { id: 4, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 175


Exec Return from function: fatorial

Statement: Return(Var("m"))

Env: Environment { id: 4, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 177


Finishing Return from function: fatorial

Return result: CInt(6)



-----------------------------------------
            counter: 178


In function execute_block:

Returning from function fatorial ...

Return result: CInt(6)

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env is about to be popped



-----------------------------------------
            counter: 180


Finishing Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 3, stack_len: 7, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 182


Exiting function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 3, stack_len: 7, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(24))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

Env is about to be popped



-----------------------------------------
            counter: 184


In function execute_block:

Single Statement: Return(Var("m"))

Env: Environment { id: 3, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(24))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 185


Exec Return from function: fatorial

Statement: Return(Var("m"))

Env: Environment { id: 3, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(24))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 187


Finishing Return from function: fatorial

Return result: CInt(24)



-----------------------------------------
            counter: 188


In function execute_block:

Returning from function fatorial ...

Return result: CInt(24)

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env is about to be popped



-----------------------------------------
            counter: 190


Finishing Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 2, stack_len: 4, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 192


Exiting function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 2, stack_len: 4, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(120))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

Env is about to be popped



-----------------------------------------
            counter: 194


In function execute_block:

Single Statement: Return(Var("m"))

Env: Environment { id: 2, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(120))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 195


Exec Return from function: fatorial

Statement: Return(Var("m"))

Env: Environment { id: 2, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(120))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 197


Finishing Return from function: fatorial

Return result: CInt(120)



-----------------------------------------
            counter: 198


In function execute_block:

Returning from function fatorial ...

Return result: CInt(120)

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env is about to be popped



-----------------------------------------
            counter: 200


Finishing Exec Assignement:

Statement: Assignment("resultado", FuncCall("fatorial", [CInt(5)]))

Env: Environment { id: 1, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(0))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 202


In function execute_block:

Single Statement: Print(CString("resultado:"))

Env: Environment { id: 1, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(120))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 203


Exec Print:

Statement: Print(CString("resultado:"))

Env: Environment { id: 1, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(120))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 204


In function execute_block:

Single Statement: Print(Var("resultado"))

Env: Environment { id: 1, stack_len: 1, current_func: "", output: ["resultado:"], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(120))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 205


Exec Print:

Statement: Print(Var("resultado"))

Env: Environment { id: 1, stack_len: 1, current_func: "", output: ["resultado:"], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(120))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 207


Exiting function execute_block:

All statements: [FuncDef(Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }), VarDeclaration("resultado", CInt(0)), Assignment("resultado", FuncCall("fatorial", [CInt(5)])), Print(CString("resultado:")), Print(Var("resultado"))]

Env: Environment { id: 1, stack_len: 1, current_func: "", output: ["resultado:", "120"], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(120))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

Env is about to be popped



-----------------------------------------
            counter: 226


Exec Block:

Statement: Block([FuncDef(Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }), VarDeclaration("resultado", CInt(0)), Assignment("resultado", FuncCall("fatorial", [CInt(6)])), Print(CString("resultado:")), Print(Var("resultado"))])

Env: Environment { id: 8, stack_len: 0, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [] }



-----------------------------------------
            counter: 227


In function execute_block:

All statements: [FuncDef(Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }), VarDeclaration("resultado", CInt(0)), Assignment("resultado", FuncCall("fatorial", [CInt(6)])), Print(CString("resultado:")), Print(Var("resultado"))]

Env: Environment { id: 8, stack_len: 0, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [] }



-----------------------------------------
            counter: 229


In function execute_block:

Single Statement: FuncDef(Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) })

Env: Environment { id: 8, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }] }



-----------------------------------------
            counter: 230


Exec FuncDef:

Statement: FuncDef(Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) })

Env: Environment { id: 8, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }] }



-----------------------------------------
            counter: 232


In function execute_block:

Single Statement: VarDeclaration("resultado", CInt(0))

Env: Environment { id: 8, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 233


Exec VarDeclaration:

Statement: VarDeclaration("resultado", CInt(0))

Env: Environment { id: 8, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 235


In function execute_block:

Single Statement: Assignment("resultado", FuncCall("fatorial", [CInt(6)]))

Env: Environment { id: 8, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(0))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 236


Exec Assignement:

Statement: Assignment("resultado", FuncCall("fatorial", [CInt(6)]))

Env: Environment { id: 8, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(0))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 245


Exec Block:

Statement: Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])

Env: Environment { id: 9, stack_len: 2, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 246


In function execute_block:

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env: Environment { id: 9, stack_len: 2, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 248


In function execute_block:

Single Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 9, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 249


Exec VarDeclaration:

Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 9, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 251


In function execute_block:

Single Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 9, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 252


Exec IfThenElse:

Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 9, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 255


In function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 9, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 257


In function execute_block:

Single Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 9, stack_len: 4, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 258


Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 9, stack_len: 4, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 270


Exec Block:

Statement: Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])

Env: Environment { id: 10, stack_len: 5, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 271


In function execute_block:

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env: Environment { id: 10, stack_len: 5, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 273


In function execute_block:

Single Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 10, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 274


Exec VarDeclaration:

Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 10, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 276


In function execute_block:

Single Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 10, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 277


Exec IfThenElse:

Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 10, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 280


In function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 10, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 282


In function execute_block:

Single Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 10, stack_len: 7, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 283


Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 10, stack_len: 7, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 295


Exec Block:

Statement: Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])

Env: Environment { id: 11, stack_len: 8, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 296


In function execute_block:

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env: Environment { id: 11, stack_len: 8, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 298


In function execute_block:

Single Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 11, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 299


Exec VarDeclaration:

Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 11, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 301


In function execute_block:

Single Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 11, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 302


Exec IfThenElse:

Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 11, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 305


In function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 11, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 307


In function execute_block:

Single Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 11, stack_len: 10, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 308


Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 11, stack_len: 10, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 320


Exec Block:

Statement: Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])

Env: Environment { id: 12, stack_len: 11, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 321


In function execute_block:

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env: Environment { id: 12, stack_len: 11, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 323


In function execute_block:

Single Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 12, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 324


Exec VarDeclaration:

Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 12, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 326


In function execute_block:

Single Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 12, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 327


Exec IfThenElse:

Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 12, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 330


In function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 12, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 332


In function execute_block:

Single Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 12, stack_len: 13, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 333


Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 12, stack_len: 13, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 345


Exec Block:

Statement: Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])

Env: Environment { id: 13, stack_len: 14, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 346


In function execute_block:

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env: Environment { id: 13, stack_len: 14, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 348


In function execute_block:

Single Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 13, stack_len: 15, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 349


Exec VarDeclaration:

Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 13, stack_len: 15, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 351


In function execute_block:

Single Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 13, stack_len: 15, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 352


Exec IfThenElse:

Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 13, stack_len: 15, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 355


In function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 13, stack_len: 15, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 357


In function execute_block:

Single Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 13, stack_len: 16, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 358


Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 13, stack_len: 16, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 370


Exec Block:

Statement: Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])

Env: Environment { id: 14, stack_len: 17, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 371


In function execute_block:

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env: Environment { id: 14, stack_len: 17, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 373


In function execute_block:

Single Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 14, stack_len: 18, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 374


Exec VarDeclaration:

Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 14, stack_len: 18, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 376


In function execute_block:

Single Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 14, stack_len: 18, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 377


Exec IfThenElse:

Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 14, stack_len: 18, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 380


In function execute_block:

All statements: [Assignment("m", CInt(1))]

Env: Environment { id: 14, stack_len: 18, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 382


In function execute_block:

Single Statement: Assignment("m", CInt(1))

Env: Environment { id: 14, stack_len: 19, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 383


Exec Assignement:

Statement: Assignment("m", CInt(1))

Env: Environment { id: 14, stack_len: 19, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 384


Finishing Exec Assignement:

Statement: Assignment("m", CInt(1))

Env: Environment { id: 14, stack_len: 19, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 386


Exiting function execute_block:

All statements: [Assignment("m", CInt(1))]

Env: Environment { id: 14, stack_len: 19, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

Env is about to be popped



-----------------------------------------
            counter: 388


In function execute_block:

Single Statement: Return(Var("m"))

Env: Environment { id: 14, stack_len: 18, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 389


Exec Return from function: fatorial

Statement: Return(Var("m"))

Env: Environment { id: 14, stack_len: 18, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 391


Finishing Return from function: fatorial

Return result: CInt(1)



-----------------------------------------
            counter: 392


In function execute_block:

Returning from function fatorial ...

Return result: CInt(1)

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env is about to be popped



-----------------------------------------
            counter: 394


Finishing Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 13, stack_len: 16, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 396


Exiting function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 13, stack_len: 16, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

Env is about to be popped



-----------------------------------------
            counter: 398


In function execute_block:

Single Statement: Return(Var("m"))

Env: Environment { id: 13, stack_len: 15, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 399


Exec Return from function: fatorial

Statement: Return(Var("m"))

Env: Environment { id: 13, stack_len: 15, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 401


Finishing Return from function: fatorial

Return result: CInt(2)



-----------------------------------------
            counter: 402


In function execute_block:

Returning from function fatorial ...

Return result: CInt(2)

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env is about to be popped



-----------------------------------------
            counter: 404


Finishing Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 12, stack_len: 13, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 406


Exiting function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 12, stack_len: 13, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

Env is about to be popped



-----------------------------------------
            counter: 408


In function execute_block:

Single Statement: Return(Var("m"))

Env: Environment { id: 12, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 409


Exec Return from function: fatorial

Statement: Return(Var("m"))

Env: Environment { id: 12, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 411


Finishing Return from function: fatorial

Return result: CInt(6)



-----------------------------------------
            counter: 412


In function execute_block:

Returning from function fatorial ...

Return result: CInt(6)

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env is about to be popped



-----------------------------------------
            counter: 414


Finishing Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 11, stack_len: 10, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 416


Exiting function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 11, stack_len: 10, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(24))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

Env is about to be popped



-----------------------------------------
            counter: 418


In function execute_block:

Single Statement: Return(Var("m"))

Env: Environment { id: 11, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(24))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 419


Exec Return from function: fatorial

Statement: Return(Var("m"))

Env: Environment { id: 11, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(24))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 421


Finishing Return from function: fatorial

Return result: CInt(24)



-----------------------------------------
            counter: 422


In function execute_block:

Returning from function fatorial ...

Return result: CInt(24)

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env is about to be popped



-----------------------------------------
            counter: 424


Finishing Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 10, stack_len: 7, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 426


Exiting function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 10, stack_len: 7, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(120))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

Env is about to be popped



-----------------------------------------
            counter: 428


In function execute_block:

Single Statement: Return(Var("m"))

Env: Environment { id: 10, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(120))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 429


Exec Return from function: fatorial

Statement: Return(Var("m"))

Env: Environment { id: 10, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(120))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 431


Finishing Return from function: fatorial

Return result: CInt(120)



-----------------------------------------
            counter: 432


In function execute_block:

Returning from function fatorial ...

Return result: CInt(120)

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env is about to be popped



-----------------------------------------
            counter: 434


Finishing Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 9, stack_len: 4, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 436


Exiting function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 9, stack_len: 4, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(720))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

Env is about to be popped



-----------------------------------------
            counter: 438


In function execute_block:

Single Statement: Return(Var("m"))

Env: Environment { id: 9, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(720))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 439


Exec Return from function: fatorial

Statement: Return(Var("m"))

Env: Environment { id: 9, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(720))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 441


Finishing Return from function: fatorial

Return result: CInt(720)



-----------------------------------------
            counter: 442


In function execute_block:

Returning from function fatorial ...

Return result: CInt(720)

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env is about to be popped



-----------------------------------------
            counter: 444


Finishing Exec Assignement:

Statement: Assignment("resultado", FuncCall("fatorial", [CInt(6)]))

Env: Environment { id: 8, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(0))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 446


In function execute_block:

Single Statement: Print(CString("resultado:"))

Env: Environment { id: 8, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(720))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 447


Exec Print:

Statement: Print(CString("resultado:"))

Env: Environment { id: 8, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(720))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 448


In function execute_block:

Single Statement: Print(Var("resultado"))

Env: Environment { id: 8, stack_len: 1, current_func: "", output: ["resultado:"], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(720))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 449


Exec Print:

Statement: Print(Var("resultado"))

Env: Environment { id: 8, stack_len: 1, current_func: "", output: ["resultado:"], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(720))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 451


Exiting function execute_block:

All statements: [FuncDef(Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }), VarDeclaration("resultado", CInt(0)), Assignment("resultado", FuncCall("fatorial", [CInt(6)])), Print(CString("resultado:")), Print(Var("resultado"))]

Env: Environment { id: 8, stack_len: 1, current_func: "", output: ["resultado:", "720"], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(720))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

Env is about to be popped



-----------------------------------------
            counter: 470


Exec Block:

Statement: Block([FuncDef(Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }), VarDeclaration("resultado", CInt(0)), Assignment("resultado", FuncCall("fatorial", [CInt(10)])), Print(CString("resultado:")), Print(Var("resultado"))])

Env: Environment { id: 16, stack_len: 0, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [] }



-----------------------------------------
            counter: 471


In function execute_block:

All statements: [FuncDef(Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }), VarDeclaration("resultado", CInt(0)), Assignment("resultado", FuncCall("fatorial", [CInt(10)])), Print(CString("resultado:")), Print(Var("resultado"))]

Env: Environment { id: 16, stack_len: 0, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [] }



-----------------------------------------
            counter: 473


In function execute_block:

Single Statement: FuncDef(Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) })

Env: Environment { id: 16, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }] }



-----------------------------------------
            counter: 474


Exec FuncDef:

Statement: FuncDef(Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) })

Env: Environment { id: 16, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }] }



-----------------------------------------
            counter: 476


In function execute_block:

Single Statement: VarDeclaration("resultado", CInt(0))

Env: Environment { id: 16, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 477


Exec VarDeclaration:

Statement: VarDeclaration("resultado", CInt(0))

Env: Environment { id: 16, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 479


In function execute_block:

Single Statement: Assignment("resultado", FuncCall("fatorial", [CInt(10)]))

Env: Environment { id: 16, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(0))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 480


Exec Assignement:

Statement: Assignment("resultado", FuncCall("fatorial", [CInt(10)]))

Env: Environment { id: 16, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(0))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 489


Exec Block:

Statement: Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])

Env: Environment { id: 17, stack_len: 2, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(10))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 490


In function execute_block:

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env: Environment { id: 17, stack_len: 2, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(10))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 492


In function execute_block:

Single Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 17, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(10))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 493


Exec VarDeclaration:

Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 17, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(10))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 495


In function execute_block:

Single Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 17, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(10))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 496


Exec IfThenElse:

Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 17, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(10))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 499


In function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 17, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(10))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 501


In function execute_block:

Single Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 17, stack_len: 4, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(10))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 502


Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 17, stack_len: 4, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(10))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 514


Exec Block:

Statement: Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])

Env: Environment { id: 18, stack_len: 5, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(9))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 515


In function execute_block:

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env: Environment { id: 18, stack_len: 5, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(9))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 517


In function execute_block:

Single Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 18, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(9))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 518


Exec VarDeclaration:

Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 18, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(9))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 520


In function execute_block:

Single Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 18, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(9))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 521


Exec IfThenElse:

Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 18, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(9))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 524


In function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 18, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(9))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 526


In function execute_block:

Single Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 18, stack_len: 7, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(9))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 527


Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 18, stack_len: 7, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(9))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 539


Exec Block:

Statement: Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])

Env: Environment { id: 19, stack_len: 8, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(8))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 540


In function execute_block:

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env: Environment { id: 19, stack_len: 8, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(8))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 542


In function execute_block:

Single Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 19, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(8))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 543


Exec VarDeclaration:

Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 19, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(8))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 545


In function execute_block:

Single Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 19, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(8))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 546


Exec IfThenElse:

Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 19, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(8))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 549


In function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 19, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(8))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 551


In function execute_block:

Single Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 19, stack_len: 10, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(8))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 552


Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 19, stack_len: 10, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(8))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 564


Exec Block:

Statement: Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])

Env: Environment { id: 20, stack_len: 11, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(7))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 565


In function execute_block:

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env: Environment { id: 20, stack_len: 11, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(7))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 567


In function execute_block:

Single Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 20, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(7))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 568


Exec VarDeclaration:

Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 20, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(7))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 570


In function execute_block:

Single Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 20, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(7))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 571


Exec IfThenElse:

Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 20, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(7))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 574


In function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 20, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(7))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 576


In function execute_block:

Single Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 20, stack_len: 13, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(7))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 577


Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 20, stack_len: 13, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(7))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 589


Exec Block:

Statement: Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])

Env: Environment { id: 21, stack_len: 14, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 590


In function execute_block:

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env: Environment { id: 21, stack_len: 14, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 592


In function execute_block:

Single Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 21, stack_len: 15, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 593


Exec VarDeclaration:

Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 21, stack_len: 15, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 595


In function execute_block:

Single Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 21, stack_len: 15, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 596


Exec IfThenElse:

Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 21, stack_len: 15, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 599


In function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 21, stack_len: 15, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 601


In function execute_block:

Single Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 21, stack_len: 16, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 602


Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 21, stack_len: 16, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 614


Exec Block:

Statement: Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])

Env: Environment { id: 22, stack_len: 17, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 615


In function execute_block:

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env: Environment { id: 22, stack_len: 17, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 617


In function execute_block:

Single Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 22, stack_len: 18, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 618


Exec VarDeclaration:

Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 22, stack_len: 18, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 620


In function execute_block:

Single Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 22, stack_len: 18, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 621


Exec IfThenElse:

Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 22, stack_len: 18, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 624


In function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 22, stack_len: 18, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 626


In function execute_block:

Single Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 22, stack_len: 19, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 627


Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 22, stack_len: 19, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 639


Exec Block:

Statement: Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])

Env: Environment { id: 23, stack_len: 20, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 640


In function execute_block:

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env: Environment { id: 23, stack_len: 20, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 642


In function execute_block:

Single Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 23, stack_len: 21, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 643


Exec VarDeclaration:

Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 23, stack_len: 21, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 645


In function execute_block:

Single Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 23, stack_len: 21, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 646


Exec IfThenElse:

Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 23, stack_len: 21, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 649


In function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 23, stack_len: 21, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 651


In function execute_block:

Single Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 23, stack_len: 22, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 652


Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 23, stack_len: 22, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 664


Exec Block:

Statement: Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])

Env: Environment { id: 24, stack_len: 23, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 665


In function execute_block:

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env: Environment { id: 24, stack_len: 23, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 667


In function execute_block:

Single Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 24, stack_len: 24, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 668


Exec VarDeclaration:

Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 24, stack_len: 24, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 670


In function execute_block:

Single Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 24, stack_len: 24, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 671


Exec IfThenElse:

Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 24, stack_len: 24, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 674


In function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 24, stack_len: 24, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 676


In function execute_block:

Single Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 24, stack_len: 25, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 677


Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 24, stack_len: 25, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 689


Exec Block:

Statement: Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])

Env: Environment { id: 25, stack_len: 26, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 690


In function execute_block:

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env: Environment { id: 25, stack_len: 26, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 692


In function execute_block:

Single Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 25, stack_len: 27, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 693


Exec VarDeclaration:

Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 25, stack_len: 27, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 695


In function execute_block:

Single Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 25, stack_len: 27, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 696


Exec IfThenElse:

Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 25, stack_len: 27, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 699


In function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 25, stack_len: 27, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 701


In function execute_block:

Single Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 25, stack_len: 28, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 702


Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 25, stack_len: 28, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 714


Exec Block:

Statement: Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])

Env: Environment { id: 26, stack_len: 29, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 715


In function execute_block:

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env: Environment { id: 26, stack_len: 29, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 717


In function execute_block:

Single Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 26, stack_len: 30, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 718


Exec VarDeclaration:

Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 26, stack_len: 30, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 720


In function execute_block:

Single Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 26, stack_len: 30, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 721


Exec IfThenElse:

Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 26, stack_len: 30, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 724


In function execute_block:

All statements: [Assignment("m", CInt(1))]

Env: Environment { id: 26, stack_len: 30, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 726


In function execute_block:

Single Statement: Assignment("m", CInt(1))

Env: Environment { id: 26, stack_len: 31, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 727


Exec Assignement:

Statement: Assignment("m", CInt(1))

Env: Environment { id: 26, stack_len: 31, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 728


Finishing Exec Assignement:

Statement: Assignment("m", CInt(1))

Env: Environment { id: 26, stack_len: 31, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 730


Exiting function execute_block:

All statements: [Assignment("m", CInt(1))]

Env: Environment { id: 26, stack_len: 31, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

Env is about to be popped



-----------------------------------------
            counter: 732


In function execute_block:

Single Statement: Return(Var("m"))

Env: Environment { id: 26, stack_len: 30, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 733


Exec Return from function: fatorial

Statement: Return(Var("m"))

Env: Environment { id: 26, stack_len: 30, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 735


Finishing Return from function: fatorial

Return result: CInt(1)



-----------------------------------------
            counter: 736


In function execute_block:

Returning from function fatorial ...

Return result: CInt(1)

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env is about to be popped



-----------------------------------------
            counter: 738


Finishing Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 25, stack_len: 28, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 740


Exiting function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 25, stack_len: 28, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

Env is about to be popped



-----------------------------------------
            counter: 742


In function execute_block:

Single Statement: Return(Var("m"))

Env: Environment { id: 25, stack_len: 27, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 743


Exec Return from function: fatorial

Statement: Return(Var("m"))

Env: Environment { id: 25, stack_len: 27, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 745


Finishing Return from function: fatorial

Return result: CInt(2)



-----------------------------------------
            counter: 746


In function execute_block:

Returning from function fatorial ...

Return result: CInt(2)

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env is about to be popped



-----------------------------------------
            counter: 748


Finishing Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 24, stack_len: 25, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 750


Exiting function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 24, stack_len: 25, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

Env is about to be popped



-----------------------------------------
            counter: 752


In function execute_block:

Single Statement: Return(Var("m"))

Env: Environment { id: 24, stack_len: 24, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 753


Exec Return from function: fatorial

Statement: Return(Var("m"))

Env: Environment { id: 24, stack_len: 24, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 755


Finishing Return from function: fatorial

Return result: CInt(6)



-----------------------------------------
            counter: 756


In function execute_block:

Returning from function fatorial ...

Return result: CInt(6)

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env is about to be popped



-----------------------------------------
            counter: 758


Finishing Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 23, stack_len: 22, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 760


Exiting function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 23, stack_len: 22, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(24))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

Env is about to be popped



-----------------------------------------
            counter: 762


In function execute_block:

Single Statement: Return(Var("m"))

Env: Environment { id: 23, stack_len: 21, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(24))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 763


Exec Return from function: fatorial

Statement: Return(Var("m"))

Env: Environment { id: 23, stack_len: 21, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(24))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 765


Finishing Return from function: fatorial

Return result: CInt(24)



-----------------------------------------
            counter: 766


In function execute_block:

Returning from function fatorial ...

Return result: CInt(24)

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env is about to be popped



-----------------------------------------
            counter: 768


Finishing Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 22, stack_len: 19, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 770


Exiting function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 22, stack_len: 19, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(120))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

Env is about to be popped



-----------------------------------------
            counter: 772


In function execute_block:

Single Statement: Return(Var("m"))

Env: Environment { id: 22, stack_len: 18, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(120))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 773


Exec Return from function: fatorial

Statement: Return(Var("m"))

Env: Environment { id: 22, stack_len: 18, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(120))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 775


Finishing Return from function: fatorial

Return result: CInt(120)



-----------------------------------------
            counter: 776


In function execute_block:

Returning from function fatorial ...

Return result: CInt(120)

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env is about to be popped



-----------------------------------------
            counter: 778


Finishing Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 21, stack_len: 16, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 780


Exiting function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 21, stack_len: 16, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(720))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

Env is about to be popped



-----------------------------------------
            counter: 782


In function execute_block:

Single Statement: Return(Var("m"))

Env: Environment { id: 21, stack_len: 15, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(720))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 783


Exec Return from function: fatorial

Statement: Return(Var("m"))

Env: Environment { id: 21, stack_len: 15, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(720))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 785


Finishing Return from function: fatorial

Return result: CInt(720)



-----------------------------------------
            counter: 786


In function execute_block:

Returning from function fatorial ...

Return result: CInt(720)

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env is about to be popped



-----------------------------------------
            counter: 788


Finishing Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 20, stack_len: 13, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(7))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 790


Exiting function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 20, stack_len: 13, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(5040))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(7))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

Env is about to be popped



-----------------------------------------
            counter: 792


In function execute_block:

Single Statement: Return(Var("m"))

Env: Environment { id: 20, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(5040))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(7))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 793


Exec Return from function: fatorial

Statement: Return(Var("m"))

Env: Environment { id: 20, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(5040))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(7))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 795


Finishing Return from function: fatorial

Return result: CInt(5040)



-----------------------------------------
            counter: 796


In function execute_block:

Returning from function fatorial ...

Return result: CInt(5040)

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env is about to be popped



-----------------------------------------
            counter: 798


Finishing Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 19, stack_len: 10, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(8))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 800


Exiting function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 19, stack_len: 10, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(40320))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(8))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

Env is about to be popped



-----------------------------------------
            counter: 802


In function execute_block:

Single Statement: Return(Var("m"))

Env: Environment { id: 19, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(40320))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(8))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 803


Exec Return from function: fatorial

Statement: Return(Var("m"))

Env: Environment { id: 19, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(40320))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(8))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 805


Finishing Return from function: fatorial

Return result: CInt(40320)



-----------------------------------------
            counter: 806


In function execute_block:

Returning from function fatorial ...

Return result: CInt(40320)

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env is about to be popped



-----------------------------------------
            counter: 808


Finishing Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 18, stack_len: 7, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(9))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 810


Exiting function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 18, stack_len: 7, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(362880))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(9))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

Env is about to be popped



-----------------------------------------
            counter: 812


In function execute_block:

Single Statement: Return(Var("m"))

Env: Environment { id: 18, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(362880))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(9))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 813


Exec Return from function: fatorial

Statement: Return(Var("m"))

Env: Environment { id: 18, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(362880))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(9))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 815


Finishing Return from function: fatorial

Return result: CInt(362880)



-----------------------------------------
            counter: 816


In function execute_block:

Returning from function fatorial ...

Return result: CInt(362880)

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env is about to be popped



-----------------------------------------
            counter: 818


Finishing Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 17, stack_len: 4, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(10))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 820


Exiting function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 17, stack_len: 4, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(3628800))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(10))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

Env is about to be popped



-----------------------------------------
            counter: 822


In function execute_block:

Single Statement: Return(Var("m"))

Env: Environment { id: 17, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(3628800))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(10))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 823


Exec Return from function: fatorial

Statement: Return(Var("m"))

Env: Environment { id: 17, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(3628800))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(10))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 825


Finishing Return from function: fatorial

Return result: CInt(3628800)



-----------------------------------------
            counter: 826


In function execute_block:

Returning from function fatorial ...

Return result: CInt(3628800)

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env is about to be popped



-----------------------------------------
            counter: 828


Finishing Exec Assignement:

Statement: Assignment("resultado", FuncCall("fatorial", [CInt(10)]))

Env: Environment { id: 16, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(0))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 830


In function execute_block:

Single Statement: Print(CString("resultado:"))

Env: Environment { id: 16, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(3628800))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 831


Exec Print:

Statement: Print(CString("resultado:"))

Env: Environment { id: 16, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(3628800))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 832


In function execute_block:

Single Statement: Print(Var("resultado"))

Env: Environment { id: 16, stack_len: 1, current_func: "", output: ["resultado:"], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(3628800))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 833


Exec Print:

Statement: Print(Var("resultado"))

Env: Environment { id: 16, stack_len: 1, current_func: "", output: ["resultado:"], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(3628800))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 835


Exiting function execute_block:

All statements: [FuncDef(Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }), VarDeclaration("resultado", CInt(0)), Assignment("resultado", FuncCall("fatorial", [CInt(10)])), Print(CString("resultado:")), Print(Var("resultado"))]

Env: Environment { id: 16, stack_len: 1, current_func: "", output: ["resultado:", "3628800"], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(3628800))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

Env is about to be popped



-----------------------------------------
            counter: 854


Exec Block:

Statement: Block([FuncDef(Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }), VarDeclaration("resultado", CInt(0)), Assignment("resultado", FuncCall("fatorial", [CInt(5)])), Print(CString("resultado:")), Print(Var("resultado"))])

Env: Environment { id: 28, stack_len: 0, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [] }



-----------------------------------------
            counter: 855


In function execute_block:

All statements: [FuncDef(Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }), VarDeclaration("resultado", CInt(0)), Assignment("resultado", FuncCall("fatorial", [CInt(5)])), Print(CString("resultado:")), Print(Var("resultado"))]

Env: Environment { id: 28, stack_len: 0, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [] }



-----------------------------------------
            counter: 857


In function execute_block:

Single Statement: FuncDef(Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) })

Env: Environment { id: 28, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }] }



-----------------------------------------
            counter: 858


Exec FuncDef:

Statement: FuncDef(Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) })

Env: Environment { id: 28, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }] }



-----------------------------------------
            counter: 860


In function execute_block:

Single Statement: VarDeclaration("resultado", CInt(0))

Env: Environment { id: 28, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 861


Exec VarDeclaration:

Statement: VarDeclaration("resultado", CInt(0))

Env: Environment { id: 28, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 863


In function execute_block:

Single Statement: Assignment("resultado", FuncCall("fatorial", [CInt(5)]))

Env: Environment { id: 28, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(0))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 864


Exec Assignement:

Statement: Assignment("resultado", FuncCall("fatorial", [CInt(5)]))

Env: Environment { id: 28, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(0))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 873


Exec Block:

Statement: Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])

Env: Environment { id: 29, stack_len: 2, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 874


In function execute_block:

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env: Environment { id: 29, stack_len: 2, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 876


In function execute_block:

Single Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 29, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 877


Exec VarDeclaration:

Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 29, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 879


In function execute_block:

Single Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 29, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 880


Exec IfThenElse:

Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 29, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 883


In function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 29, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 885


In function execute_block:

Single Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 29, stack_len: 4, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 886


Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 29, stack_len: 4, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 898


Exec Block:

Statement: Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])

Env: Environment { id: 30, stack_len: 5, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 899


In function execute_block:

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env: Environment { id: 30, stack_len: 5, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 901


In function execute_block:

Single Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 30, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 902


Exec VarDeclaration:

Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 30, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 904


In function execute_block:

Single Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 30, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 905


Exec IfThenElse:

Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 30, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 908


In function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 30, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 910


In function execute_block:

Single Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 30, stack_len: 7, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 911


Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 30, stack_len: 7, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 923


Exec Block:

Statement: Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])

Env: Environment { id: 31, stack_len: 8, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 924


In function execute_block:

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env: Environment { id: 31, stack_len: 8, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 926


In function execute_block:

Single Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 31, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 927


Exec VarDeclaration:

Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 31, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 929


In function execute_block:

Single Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 31, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 930


Exec IfThenElse:

Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 31, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 933


In function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 31, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 935


In function execute_block:

Single Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 31, stack_len: 10, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 936


Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 31, stack_len: 10, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 948


Exec Block:

Statement: Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])

Env: Environment { id: 32, stack_len: 11, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 949


In function execute_block:

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env: Environment { id: 32, stack_len: 11, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 951


In function execute_block:

Single Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 32, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 952


Exec VarDeclaration:

Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 32, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 954


In function execute_block:

Single Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 32, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 955


Exec IfThenElse:

Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 32, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 958


In function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 32, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 960


In function execute_block:

Single Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 32, stack_len: 13, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 961


Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 32, stack_len: 13, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 973


Exec Block:

Statement: Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])

Env: Environment { id: 33, stack_len: 14, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 974


In function execute_block:

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env: Environment { id: 33, stack_len: 14, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 976


In function execute_block:

Single Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 33, stack_len: 15, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 977


Exec VarDeclaration:

Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 33, stack_len: 15, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 979


In function execute_block:

Single Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 33, stack_len: 15, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 980


Exec IfThenElse:

Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 33, stack_len: 15, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 983


In function execute_block:

All statements: [Assignment("m", CInt(1))]

Env: Environment { id: 33, stack_len: 15, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 985


In function execute_block:

Single Statement: Assignment("m", CInt(1))

Env: Environment { id: 33, stack_len: 16, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 986


Exec Assignement:

Statement: Assignment("m", CInt(1))

Env: Environment { id: 33, stack_len: 16, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 987


Finishing Exec Assignement:

Statement: Assignment("m", CInt(1))

Env: Environment { id: 33, stack_len: 16, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 989


Exiting function execute_block:

All statements: [Assignment("m", CInt(1))]

Env: Environment { id: 33, stack_len: 16, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

Env is about to be popped



-----------------------------------------
            counter: 991


In function execute_block:

Single Statement: Return(Var("m"))

Env: Environment { id: 33, stack_len: 15, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 992


Exec Return from function: fatorial

Statement: Return(Var("m"))

Env: Environment { id: 33, stack_len: 15, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 994


Finishing Return from function: fatorial

Return result: CInt(1)



-----------------------------------------
            counter: 995


In function execute_block:

Returning from function fatorial ...

Return result: CInt(1)

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env is about to be popped



-----------------------------------------
            counter: 997


Finishing Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 32, stack_len: 13, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 999


Exiting function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 32, stack_len: 13, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

Env is about to be popped



-----------------------------------------
            counter: 1001


In function execute_block:

Single Statement: Return(Var("m"))

Env: Environment { id: 32, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1002


Exec Return from function: fatorial

Statement: Return(Var("m"))

Env: Environment { id: 32, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1004


Finishing Return from function: fatorial

Return result: CInt(2)



-----------------------------------------
            counter: 1005


In function execute_block:

Returning from function fatorial ...

Return result: CInt(2)

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env is about to be popped



-----------------------------------------
            counter: 1007


Finishing Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 31, stack_len: 10, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1009


Exiting function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 31, stack_len: 10, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

Env is about to be popped



-----------------------------------------
            counter: 1011


In function execute_block:

Single Statement: Return(Var("m"))

Env: Environment { id: 31, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1012


Exec Return from function: fatorial

Statement: Return(Var("m"))

Env: Environment { id: 31, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1014


Finishing Return from function: fatorial

Return result: CInt(6)



-----------------------------------------
            counter: 1015


In function execute_block:

Returning from function fatorial ...

Return result: CInt(6)

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env is about to be popped



-----------------------------------------
            counter: 1017


Finishing Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 30, stack_len: 7, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1019


Exiting function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 30, stack_len: 7, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(24))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

Env is about to be popped



-----------------------------------------
            counter: 1021


In function execute_block:

Single Statement: Return(Var("m"))

Env: Environment { id: 30, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(24))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1022


Exec Return from function: fatorial

Statement: Return(Var("m"))

Env: Environment { id: 30, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(24))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1024


Finishing Return from function: fatorial

Return result: CInt(24)



-----------------------------------------
            counter: 1025


In function execute_block:

Returning from function fatorial ...

Return result: CInt(24)

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env is about to be popped



-----------------------------------------
            counter: 1027


Finishing Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 29, stack_len: 4, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1029


Exiting function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 29, stack_len: 4, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(120))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

Env is about to be popped



-----------------------------------------
            counter: 1031


In function execute_block:

Single Statement: Return(Var("m"))

Env: Environment { id: 29, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(120))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1032


Exec Return from function: fatorial

Statement: Return(Var("m"))

Env: Environment { id: 29, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(120))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1034


Finishing Return from function: fatorial

Return result: CInt(120)



-----------------------------------------
            counter: 1035


In function execute_block:

Returning from function fatorial ...

Return result: CInt(120)

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env is about to be popped



-----------------------------------------
            counter: 1037


Finishing Exec Assignement:

Statement: Assignment("resultado", FuncCall("fatorial", [CInt(5)]))

Env: Environment { id: 28, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(0))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1039


In function execute_block:

Single Statement: Print(CString("resultado:"))

Env: Environment { id: 28, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(120))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1040


Exec Print:

Statement: Print(CString("resultado:"))

Env: Environment { id: 28, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(120))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1041


In function execute_block:

Single Statement: Print(Var("resultado"))

Env: Environment { id: 28, stack_len: 1, current_func: "", output: ["resultado:"], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(120))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1042


Exec Print:

Statement: Print(Var("resultado"))

Env: Environment { id: 28, stack_len: 1, current_func: "", output: ["resultado:"], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(120))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1044


Exiting function execute_block:

All statements: [FuncDef(Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }), VarDeclaration("resultado", CInt(0)), Assignment("resultado", FuncCall("fatorial", [CInt(5)])), Print(CString("resultado:")), Print(Var("resultado"))]

Env: Environment { id: 28, stack_len: 1, current_func: "", output: ["resultado:", "120"], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(120))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

Env is about to be popped



-----------------------------------------
            counter: 1063


Exec Block:

Statement: Block([FuncDef(Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }), VarDeclaration("resultado", CInt(0)), Assignment("resultado", FuncCall("fatorial", [CInt(4)])), Print(CString("resultado:")), Print(Var("resultado"))])

Env: Environment { id: 35, stack_len: 0, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [] }



-----------------------------------------
            counter: 1064


In function execute_block:

All statements: [FuncDef(Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }), VarDeclaration("resultado", CInt(0)), Assignment("resultado", FuncCall("fatorial", [CInt(4)])), Print(CString("resultado:")), Print(Var("resultado"))]

Env: Environment { id: 35, stack_len: 0, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [] }



-----------------------------------------
            counter: 1066


In function execute_block:

Single Statement: FuncDef(Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) })

Env: Environment { id: 35, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }] }



-----------------------------------------
            counter: 1067


Exec FuncDef:

Statement: FuncDef(Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) })

Env: Environment { id: 35, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }] }



-----------------------------------------
            counter: 1069


In function execute_block:

Single Statement: VarDeclaration("resultado", CInt(0))

Env: Environment { id: 35, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1070


Exec VarDeclaration:

Statement: VarDeclaration("resultado", CInt(0))

Env: Environment { id: 35, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1072


In function execute_block:

Single Statement: Assignment("resultado", FuncCall("fatorial", [CInt(4)]))

Env: Environment { id: 35, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(0))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1073


Exec Assignement:

Statement: Assignment("resultado", FuncCall("fatorial", [CInt(4)]))

Env: Environment { id: 35, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(0))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1082


Exec Block:

Statement: Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])

Env: Environment { id: 36, stack_len: 2, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1083


In function execute_block:

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env: Environment { id: 36, stack_len: 2, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1085


In function execute_block:

Single Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 36, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1086


Exec VarDeclaration:

Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 36, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1088


In function execute_block:

Single Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 36, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1089


Exec IfThenElse:

Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 36, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1092


In function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 36, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1094


In function execute_block:

Single Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 36, stack_len: 4, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1095


Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 36, stack_len: 4, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1107


Exec Block:

Statement: Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])

Env: Environment { id: 37, stack_len: 5, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1108


In function execute_block:

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env: Environment { id: 37, stack_len: 5, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1110


In function execute_block:

Single Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 37, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1111


Exec VarDeclaration:

Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 37, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1113


In function execute_block:

Single Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 37, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1114


Exec IfThenElse:

Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 37, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1117


In function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 37, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1119


In function execute_block:

Single Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 37, stack_len: 7, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1120


Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 37, stack_len: 7, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1132


Exec Block:

Statement: Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])

Env: Environment { id: 38, stack_len: 8, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1133


In function execute_block:

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env: Environment { id: 38, stack_len: 8, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1135


In function execute_block:

Single Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 38, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1136


Exec VarDeclaration:

Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 38, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1138


In function execute_block:

Single Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 38, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1139


Exec IfThenElse:

Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 38, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1142


In function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 38, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1144


In function execute_block:

Single Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 38, stack_len: 10, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1145


Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 38, stack_len: 10, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1157


Exec Block:

Statement: Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])

Env: Environment { id: 39, stack_len: 11, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1158


In function execute_block:

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env: Environment { id: 39, stack_len: 11, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1160


In function execute_block:

Single Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 39, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1161


Exec VarDeclaration:

Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 39, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1163


In function execute_block:

Single Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 39, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1164


Exec IfThenElse:

Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 39, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1167


In function execute_block:

All statements: [Assignment("m", CInt(1))]

Env: Environment { id: 39, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1169


In function execute_block:

Single Statement: Assignment("m", CInt(1))

Env: Environment { id: 39, stack_len: 13, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1170


Exec Assignement:

Statement: Assignment("m", CInt(1))

Env: Environment { id: 39, stack_len: 13, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1171


Finishing Exec Assignement:

Statement: Assignment("m", CInt(1))

Env: Environment { id: 39, stack_len: 13, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1173


Exiting function execute_block:

All statements: [Assignment("m", CInt(1))]

Env: Environment { id: 39, stack_len: 13, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

Env is about to be popped



-----------------------------------------
            counter: 1175


In function execute_block:

Single Statement: Return(Var("m"))

Env: Environment { id: 39, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1176


Exec Return from function: fatorial

Statement: Return(Var("m"))

Env: Environment { id: 39, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1178


Finishing Return from function: fatorial

Return result: CInt(1)



-----------------------------------------
            counter: 1179


In function execute_block:

Returning from function fatorial ...

Return result: CInt(1)

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env is about to be popped



-----------------------------------------
            counter: 1181


Finishing Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 38, stack_len: 10, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1183


Exiting function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 38, stack_len: 10, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

Env is about to be popped



-----------------------------------------
            counter: 1185


In function execute_block:

Single Statement: Return(Var("m"))

Env: Environment { id: 38, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1186


Exec Return from function: fatorial

Statement: Return(Var("m"))

Env: Environment { id: 38, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1188


Finishing Return from function: fatorial

Return result: CInt(2)



-----------------------------------------
            counter: 1189


In function execute_block:

Returning from function fatorial ...

Return result: CInt(2)

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env is about to be popped



-----------------------------------------
            counter: 1191


Finishing Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 37, stack_len: 7, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1193


Exiting function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 37, stack_len: 7, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

Env is about to be popped



-----------------------------------------
            counter: 1195


In function execute_block:

Single Statement: Return(Var("m"))

Env: Environment { id: 37, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1196


Exec Return from function: fatorial

Statement: Return(Var("m"))

Env: Environment { id: 37, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1198


Finishing Return from function: fatorial

Return result: CInt(6)



-----------------------------------------
            counter: 1199


In function execute_block:

Returning from function fatorial ...

Return result: CInt(6)

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env is about to be popped



-----------------------------------------
            counter: 1201


Finishing Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 36, stack_len: 4, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1203


Exiting function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 36, stack_len: 4, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(24))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

Env is about to be popped



-----------------------------------------
            counter: 1205


In function execute_block:

Single Statement: Return(Var("m"))

Env: Environment { id: 36, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(24))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1206


Exec Return from function: fatorial

Statement: Return(Var("m"))

Env: Environment { id: 36, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(24))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1208


Finishing Return from function: fatorial

Return result: CInt(24)



-----------------------------------------
            counter: 1209


In function execute_block:

Returning from function fatorial ...

Return result: CInt(24)

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env is about to be popped



-----------------------------------------
            counter: 1211


Finishing Exec Assignement:

Statement: Assignment("resultado", FuncCall("fatorial", [CInt(4)]))

Env: Environment { id: 35, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(0))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1213


In function execute_block:

Single Statement: Print(CString("resultado:"))

Env: Environment { id: 35, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(24))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1214


Exec Print:

Statement: Print(CString("resultado:"))

Env: Environment { id: 35, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(24))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1215


In function execute_block:

Single Statement: Print(Var("resultado"))

Env: Environment { id: 35, stack_len: 1, current_func: "", output: ["resultado:"], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(24))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1216


Exec Print:

Statement: Print(Var("resultado"))

Env: Environment { id: 35, stack_len: 1, current_func: "", output: ["resultado:"], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(24))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1218


Exiting function execute_block:

All statements: [FuncDef(Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }), VarDeclaration("resultado", CInt(0)), Assignment("resultado", FuncCall("fatorial", [CInt(4)])), Print(CString("resultado:")), Print(Var("resultado"))]

Env: Environment { id: 35, stack_len: 1, current_func: "", output: ["resultado:", "24"], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(24))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

Env is about to be popped



-----------------------------------------
            counter: 1237


Exec Block:

Statement: Block([FuncDef(Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }), VarDeclaration("resultado", CInt(0)), Assignment("resultado", FuncCall("fatorial", [CInt(10)])), Print(CString("resultado:")), Print(Var("resultado"))])

Env: Environment { id: 41, stack_len: 0, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [] }



-----------------------------------------
            counter: 1238


In function execute_block:

All statements: [FuncDef(Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }), VarDeclaration("resultado", CInt(0)), Assignment("resultado", FuncCall("fatorial", [CInt(10)])), Print(CString("resultado:")), Print(Var("resultado"))]

Env: Environment { id: 41, stack_len: 0, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [] }



-----------------------------------------
            counter: 1240


In function execute_block:

Single Statement: FuncDef(Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) })

Env: Environment { id: 41, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }] }



-----------------------------------------
            counter: 1241


Exec FuncDef:

Statement: FuncDef(Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) })

Env: Environment { id: 41, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }] }



-----------------------------------------
            counter: 1243


In function execute_block:

Single Statement: VarDeclaration("resultado", CInt(0))

Env: Environment { id: 41, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1244


Exec VarDeclaration:

Statement: VarDeclaration("resultado", CInt(0))

Env: Environment { id: 41, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1246


In function execute_block:

Single Statement: Assignment("resultado", FuncCall("fatorial", [CInt(10)]))

Env: Environment { id: 41, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(0))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1247


Exec Assignement:

Statement: Assignment("resultado", FuncCall("fatorial", [CInt(10)]))

Env: Environment { id: 41, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(0))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1256


Exec Block:

Statement: Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])

Env: Environment { id: 42, stack_len: 2, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(10))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1257


In function execute_block:

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env: Environment { id: 42, stack_len: 2, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(10))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1259


In function execute_block:

Single Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 42, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(10))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1260


Exec VarDeclaration:

Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 42, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(10))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1262


In function execute_block:

Single Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 42, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(10))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1263


Exec IfThenElse:

Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 42, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(10))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1266


In function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 42, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(10))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1268


In function execute_block:

Single Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 42, stack_len: 4, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(10))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1269


Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 42, stack_len: 4, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(10))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1281


Exec Block:

Statement: Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])

Env: Environment { id: 43, stack_len: 5, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(9))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1282


In function execute_block:

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env: Environment { id: 43, stack_len: 5, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(9))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1284


In function execute_block:

Single Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 43, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(9))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1285


Exec VarDeclaration:

Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 43, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(9))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1287


In function execute_block:

Single Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 43, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(9))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1288


Exec IfThenElse:

Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 43, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(9))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1291


In function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 43, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(9))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1293


In function execute_block:

Single Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 43, stack_len: 7, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(9))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1294


Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 43, stack_len: 7, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(9))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1306


Exec Block:

Statement: Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])

Env: Environment { id: 44, stack_len: 8, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(8))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1307


In function execute_block:

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env: Environment { id: 44, stack_len: 8, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(8))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1309


In function execute_block:

Single Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 44, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(8))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1310


Exec VarDeclaration:

Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 44, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(8))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1312


In function execute_block:

Single Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 44, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(8))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1313


Exec IfThenElse:

Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 44, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(8))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1316


In function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 44, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(8))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1318


In function execute_block:

Single Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 44, stack_len: 10, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(8))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1319


Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 44, stack_len: 10, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(8))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1331


Exec Block:

Statement: Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])

Env: Environment { id: 45, stack_len: 11, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(7))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1332


In function execute_block:

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env: Environment { id: 45, stack_len: 11, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(7))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1334


In function execute_block:

Single Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 45, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(7))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1335


Exec VarDeclaration:

Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 45, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(7))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1337


In function execute_block:

Single Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 45, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(7))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1338


Exec IfThenElse:

Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 45, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(7))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1341


In function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 45, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(7))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1343


In function execute_block:

Single Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 45, stack_len: 13, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(7))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1344


Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 45, stack_len: 13, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(7))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1356


Exec Block:

Statement: Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])

Env: Environment { id: 46, stack_len: 14, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1357


In function execute_block:

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env: Environment { id: 46, stack_len: 14, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1359


In function execute_block:

Single Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 46, stack_len: 15, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1360


Exec VarDeclaration:

Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 46, stack_len: 15, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1362


In function execute_block:

Single Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 46, stack_len: 15, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1363


Exec IfThenElse:

Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 46, stack_len: 15, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1366


In function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 46, stack_len: 15, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1368


In function execute_block:

Single Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 46, stack_len: 16, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1369


Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 46, stack_len: 16, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1381


Exec Block:

Statement: Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])

Env: Environment { id: 47, stack_len: 17, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1382


In function execute_block:

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env: Environment { id: 47, stack_len: 17, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1384


In function execute_block:

Single Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 47, stack_len: 18, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1385


Exec VarDeclaration:

Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 47, stack_len: 18, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1387


In function execute_block:

Single Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 47, stack_len: 18, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1388


Exec IfThenElse:

Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 47, stack_len: 18, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1391


In function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 47, stack_len: 18, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1393


In function execute_block:

Single Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 47, stack_len: 19, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1394


Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 47, stack_len: 19, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1406


Exec Block:

Statement: Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])

Env: Environment { id: 48, stack_len: 20, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1407


In function execute_block:

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env: Environment { id: 48, stack_len: 20, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1409


In function execute_block:

Single Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 48, stack_len: 21, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1410


Exec VarDeclaration:

Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 48, stack_len: 21, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1412


In function execute_block:

Single Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 48, stack_len: 21, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1413


Exec IfThenElse:

Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 48, stack_len: 21, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1416


In function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 48, stack_len: 21, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1418


In function execute_block:

Single Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 48, stack_len: 22, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1419


Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 48, stack_len: 22, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1431


Exec Block:

Statement: Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])

Env: Environment { id: 49, stack_len: 23, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1432


In function execute_block:

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env: Environment { id: 49, stack_len: 23, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1434


In function execute_block:

Single Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 49, stack_len: 24, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1435


Exec VarDeclaration:

Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 49, stack_len: 24, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1437


In function execute_block:

Single Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 49, stack_len: 24, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1438


Exec IfThenElse:

Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 49, stack_len: 24, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1441


In function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 49, stack_len: 24, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1443


In function execute_block:

Single Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 49, stack_len: 25, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1444


Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 49, stack_len: 25, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1456


Exec Block:

Statement: Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])

Env: Environment { id: 50, stack_len: 26, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1457


In function execute_block:

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env: Environment { id: 50, stack_len: 26, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1459


In function execute_block:

Single Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 50, stack_len: 27, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1460


Exec VarDeclaration:

Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 50, stack_len: 27, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1462


In function execute_block:

Single Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 50, stack_len: 27, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1463


Exec IfThenElse:

Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 50, stack_len: 27, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1466


In function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 50, stack_len: 27, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1468


In function execute_block:

Single Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 50, stack_len: 28, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1469


Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 50, stack_len: 28, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1481


Exec Block:

Statement: Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])

Env: Environment { id: 51, stack_len: 29, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1482


In function execute_block:

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env: Environment { id: 51, stack_len: 29, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1484


In function execute_block:

Single Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 51, stack_len: 30, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1485


Exec VarDeclaration:

Statement: VarDeclaration("m", CInt(0))

Env: Environment { id: 51, stack_len: 30, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1487


In function execute_block:

Single Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 51, stack_len: 30, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1488


Exec IfThenElse:

Statement: IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))])))

Env: Environment { id: 51, stack_len: 30, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1491


In function execute_block:

All statements: [Assignment("m", CInt(1))]

Env: Environment { id: 51, stack_len: 30, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1493


In function execute_block:

Single Statement: Assignment("m", CInt(1))

Env: Environment { id: 51, stack_len: 31, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1494


Exec Assignement:

Statement: Assignment("m", CInt(1))

Env: Environment { id: 51, stack_len: 31, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1495


Finishing Exec Assignement:

Statement: Assignment("m", CInt(1))

Env: Environment { id: 51, stack_len: 31, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1497


Exiting function execute_block:

All statements: [Assignment("m", CInt(1))]

Env: Environment { id: 51, stack_len: 31, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

Env is about to be popped



-----------------------------------------
            counter: 1499


In function execute_block:

Single Statement: Return(Var("m"))

Env: Environment { id: 51, stack_len: 30, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1500


Exec Return from function: fatorial

Statement: Return(Var("m"))

Env: Environment { id: 51, stack_len: 30, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1502


Finishing Return from function: fatorial

Return result: CInt(1)



-----------------------------------------
            counter: 1503


In function execute_block:

Returning from function fatorial ...

Return result: CInt(1)

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env is about to be popped



-----------------------------------------
            counter: 1505


Finishing Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 50, stack_len: 28, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1507


Exiting function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 50, stack_len: 28, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

Env is about to be popped



-----------------------------------------
            counter: 1509


In function execute_block:

Single Statement: Return(Var("m"))

Env: Environment { id: 50, stack_len: 27, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1510


Exec Return from function: fatorial

Statement: Return(Var("m"))

Env: Environment { id: 50, stack_len: 27, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1512


Finishing Return from function: fatorial

Return result: CInt(2)



-----------------------------------------
            counter: 1513


In function execute_block:

Returning from function fatorial ...

Return result: CInt(2)

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env is about to be popped



-----------------------------------------
            counter: 1515


Finishing Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 49, stack_len: 25, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1517


Exiting function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 49, stack_len: 25, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

Env is about to be popped



-----------------------------------------
            counter: 1519


In function execute_block:

Single Statement: Return(Var("m"))

Env: Environment { id: 49, stack_len: 24, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1520


Exec Return from function: fatorial

Statement: Return(Var("m"))

Env: Environment { id: 49, stack_len: 24, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1522


Finishing Return from function: fatorial

Return result: CInt(6)



-----------------------------------------
            counter: 1523


In function execute_block:

Returning from function fatorial ...

Return result: CInt(6)

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env is about to be popped



-----------------------------------------
            counter: 1525


Finishing Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 48, stack_len: 22, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1527


Exiting function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 48, stack_len: 22, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(24))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

Env is about to be popped



-----------------------------------------
            counter: 1529


In function execute_block:

Single Statement: Return(Var("m"))

Env: Environment { id: 48, stack_len: 21, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(24))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1530


Exec Return from function: fatorial

Statement: Return(Var("m"))

Env: Environment { id: 48, stack_len: 21, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(24))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1532


Finishing Return from function: fatorial

Return result: CInt(24)



-----------------------------------------
            counter: 1533


In function execute_block:

Returning from function fatorial ...

Return result: CInt(24)

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env is about to be popped



-----------------------------------------
            counter: 1535


Finishing Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 47, stack_len: 19, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1537


Exiting function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 47, stack_len: 19, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(120))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

Env is about to be popped



-----------------------------------------
            counter: 1539


In function execute_block:

Single Statement: Return(Var("m"))

Env: Environment { id: 47, stack_len: 18, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(120))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1540


Exec Return from function: fatorial

Statement: Return(Var("m"))

Env: Environment { id: 47, stack_len: 18, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(120))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1542


Finishing Return from function: fatorial

Return result: CInt(120)



-----------------------------------------
            counter: 1543


In function execute_block:

Returning from function fatorial ...

Return result: CInt(120)

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env is about to be popped



-----------------------------------------
            counter: 1545


Finishing Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 46, stack_len: 16, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1547


Exiting function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 46, stack_len: 16, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(720))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

Env is about to be popped



-----------------------------------------
            counter: 1549


In function execute_block:

Single Statement: Return(Var("m"))

Env: Environment { id: 46, stack_len: 15, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(720))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1550


Exec Return from function: fatorial

Statement: Return(Var("m"))

Env: Environment { id: 46, stack_len: 15, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(720))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1552


Finishing Return from function: fatorial

Return result: CInt(720)



-----------------------------------------
            counter: 1553


In function execute_block:

Returning from function fatorial ...

Return result: CInt(720)

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env is about to be popped



-----------------------------------------
            counter: 1555


Finishing Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 45, stack_len: 13, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(7))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1557


Exiting function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 45, stack_len: 13, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(5040))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(7))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

Env is about to be popped



-----------------------------------------
            counter: 1559


In function execute_block:

Single Statement: Return(Var("m"))

Env: Environment { id: 45, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(5040))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(7))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1560


Exec Return from function: fatorial

Statement: Return(Var("m"))

Env: Environment { id: 45, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(5040))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(7))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1562


Finishing Return from function: fatorial

Return result: CInt(5040)



-----------------------------------------
            counter: 1563


In function execute_block:

Returning from function fatorial ...

Return result: CInt(5040)

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env is about to be popped



-----------------------------------------
            counter: 1565


Finishing Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 44, stack_len: 10, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(8))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1567


Exiting function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 44, stack_len: 10, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(40320))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(8))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

Env is about to be popped



-----------------------------------------
            counter: 1569


In function execute_block:

Single Statement: Return(Var("m"))

Env: Environment { id: 44, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(40320))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(8))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1570


Exec Return from function: fatorial

Statement: Return(Var("m"))

Env: Environment { id: 44, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(40320))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(8))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1572


Finishing Return from function: fatorial

Return result: CInt(40320)



-----------------------------------------
            counter: 1573


In function execute_block:

Returning from function fatorial ...

Return result: CInt(40320)

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env is about to be popped



-----------------------------------------
            counter: 1575


Finishing Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 43, stack_len: 7, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(9))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1577


Exiting function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 43, stack_len: 7, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(362880))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(9))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

Env is about to be popped



-----------------------------------------
            counter: 1579


In function execute_block:

Single Statement: Return(Var("m"))

Env: Environment { id: 43, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(362880))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(9))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1580


Exec Return from function: fatorial

Statement: Return(Var("m"))

Env: Environment { id: 43, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(362880))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(9))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1582


Finishing Return from function: fatorial

Return result: CInt(362880)



-----------------------------------------
            counter: 1583


In function execute_block:

Returning from function fatorial ...

Return result: CInt(362880)

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env is about to be popped



-----------------------------------------
            counter: 1585


Finishing Exec Assignement:

Statement: Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))

Env: Environment { id: 42, stack_len: 4, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(10))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1587


Exiting function execute_block:

All statements: [Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]

Env: Environment { id: 42, stack_len: 4, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(3628800))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(10))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

Env is about to be popped



-----------------------------------------
            counter: 1589


In function execute_block:

Single Statement: Return(Var("m"))

Env: Environment { id: 42, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(3628800))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(10))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1590


Exec Return from function: fatorial

Statement: Return(Var("m"))

Env: Environment { id: 42, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(3628800))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(10))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1592


Finishing Return from function: fatorial

Return result: CInt(3628800)



-----------------------------------------
            counter: 1593


In function execute_block:

Returning from function fatorial ...

Return result: CInt(3628800)

All statements: [VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))]

Env is about to be popped



-----------------------------------------
            counter: 1595


Finishing Exec Assignement:

Statement: Assignment("resultado", FuncCall("fatorial", [CInt(10)]))

Env: Environment { id: 41, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(0))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1597


In function execute_block:

Single Statement: Print(CString("resultado:"))

Env: Environment { id: 41, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(3628800))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1598


Exec Print:

Statement: Print(CString("resultado:"))

Env: Environment { id: 41, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(3628800))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1599


In function execute_block:

Single Statement: Print(Var("resultado"))

Env: Environment { id: 41, stack_len: 1, current_func: "", output: ["resultado:"], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(3628800))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1600


Exec Print:

Statement: Print(Var("resultado"))

Env: Environment { id: 41, stack_len: 1, current_func: "", output: ["resultado:"], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(3628800))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 1602


Exiting function execute_block:

All statements: [FuncDef(Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }), VarDeclaration("resultado", CInt(0)), Assignment("resultado", FuncCall("fatorial", [CInt(10)])), Print(CString("resultado:")), Print(Var("resultado"))]

Env: Environment { id: 41, stack_len: 1, current_func: "", output: ["resultado:", "3628800"], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"resultado": (true, CInt(3628800))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

Env is about to be popped


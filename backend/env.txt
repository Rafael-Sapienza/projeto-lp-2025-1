

-----------------------------------------
            counter: 214


New Env: 7



-----------------------------------------
            counter: 215


Env 7 pushed:

Environment { id: 7, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }] }



-----------------------------------------
            counter: 216


Function fatorial mapped to Env 7

Environment { id: 7, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 217


Trying to create variable ...

Variable 'x' was successfully created

Environment { id: 7, stack_len: 1, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, TInteger)}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 218


Trying to create variable ...

Variable 'm' was successfully created

Environment { id: 7, stack_len: 1, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, TInteger), "x": (false, TInteger)}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 219


Trying to create variable ...

Variable 'return' was successfully created

Environment { id: 7, stack_len: 1, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, TInteger), "return": (false, TInteger), "x": (false, TInteger)}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 220


Env 7 popped:

Environment { id: 7, stack_len: 0, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [] }



-----------------------------------------
            counter: 221


Function fatorial mapped to Env 7

Environment { id: 7, stack_len: 0, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }, stack: [] }



-----------------------------------------
            counter: 222


Trying to create variable ...

Variable 'a' was successfully created

Environment { id: 7, stack_len: 0, current_func: "fatorial", output: [], globals: Scope { variables: {"a": (true, TInteger)}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }, stack: [] }



-----------------------------------------
            counter: 224


New Env: 8



-----------------------------------------
            counter: 228


Env 8 pushed:

Environment { id: 8, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }] }



-----------------------------------------
            counter: 231


Function fatorial mapped to Env 8

Environment { id: 8, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 234


Trying to create variable ...

Variable 'a' was successfully created

Environment { id: 8, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"a": (true, CInt(0))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 240


New Env: 9



-----------------------------------------
            counter: 241


Env 9 pushed:

Environment { id: 9, stack_len: 2, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 243


Trying to create variable ...

Variable 'x' was successfully created

Environment { id: 9, stack_len: 2, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(7))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 247


Env 9 pushed:

Environment { id: 9, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(7))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 250


Trying to create variable ...

Variable 'm' was successfully created

Environment { id: 9, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(7))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 256


Env 9 pushed:

Environment { id: 9, stack_len: 4, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(7))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 264


New Env: 10



-----------------------------------------
            counter: 265


Env 10 pushed:

Environment { id: 10, stack_len: 5, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 268


Trying to create variable ...

Variable 'x' was successfully created

Environment { id: 10, stack_len: 5, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 272


Env 10 pushed:

Environment { id: 10, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 275


Trying to create variable ...

Variable 'm' was successfully created

Environment { id: 10, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 281


Env 10 pushed:

Environment { id: 10, stack_len: 7, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 289


New Env: 11



-----------------------------------------
            counter: 290


Env 11 pushed:

Environment { id: 11, stack_len: 8, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 293


Trying to create variable ...

Variable 'x' was successfully created

Environment { id: 11, stack_len: 8, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 297


Env 11 pushed:

Environment { id: 11, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 300


Trying to create variable ...

Variable 'm' was successfully created

Environment { id: 11, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 306


Env 11 pushed:

Environment { id: 11, stack_len: 10, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 314


New Env: 12



-----------------------------------------
            counter: 315


Env 12 pushed:

Environment { id: 12, stack_len: 11, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 318


Trying to create variable ...

Variable 'x' was successfully created

Environment { id: 12, stack_len: 11, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 322


Env 12 pushed:

Environment { id: 12, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 325


Trying to create variable ...

Variable 'm' was successfully created

Environment { id: 12, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 331


Env 12 pushed:

Environment { id: 12, stack_len: 13, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 339


New Env: 13



-----------------------------------------
            counter: 340


Env 13 pushed:

Environment { id: 13, stack_len: 14, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 343


Trying to create variable ...

Variable 'x' was successfully created

Environment { id: 13, stack_len: 14, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 347


Env 13 pushed:

Environment { id: 13, stack_len: 15, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 350


Trying to create variable ...

Variable 'm' was successfully created

Environment { id: 13, stack_len: 15, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 356


Env 13 pushed:

Environment { id: 13, stack_len: 16, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 364


New Env: 14



-----------------------------------------
            counter: 365


Env 14 pushed:

Environment { id: 14, stack_len: 17, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 368


Trying to create variable ...

Variable 'x' was successfully created

Environment { id: 14, stack_len: 17, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 372


Env 14 pushed:

Environment { id: 14, stack_len: 18, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 375


Trying to create variable ...

Variable 'm' was successfully created

Environment { id: 14, stack_len: 18, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 381


Env 14 pushed:

Environment { id: 14, stack_len: 19, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 389


New Env: 15



-----------------------------------------
            counter: 390


Env 15 pushed:

Environment { id: 15, stack_len: 20, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 393


Trying to create variable ...

Variable 'x' was successfully created

Environment { id: 15, stack_len: 20, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 397


Env 15 pushed:

Environment { id: 15, stack_len: 21, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 400


Trying to create variable ...

Variable 'm' was successfully created

Environment { id: 15, stack_len: 21, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 406


Env 15 pushed:

Environment { id: 15, stack_len: 22, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 410


Trying to assign value 'CInt(1)' to variable 'm'...

Assignment was successfull

Environment { id: 15, stack_len: 22, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 412


Env 15 popped:

Environment { id: 15, stack_len: 21, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 418


Env 15 popped:

Environment { id: 15, stack_len: 20, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 420


Trying to assign value 'CInt(2)' to variable 'm'...

Assignment was successfull

Environment { id: 14, stack_len: 19, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 422


Env 14 popped:

Environment { id: 14, stack_len: 18, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 428


Env 14 popped:

Environment { id: 14, stack_len: 17, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 430


Trying to assign value 'CInt(6)' to variable 'm'...

Assignment was successfull

Environment { id: 13, stack_len: 16, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 432


Env 13 popped:

Environment { id: 13, stack_len: 15, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 438


Env 13 popped:

Environment { id: 13, stack_len: 14, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 440


Trying to assign value 'CInt(24)' to variable 'm'...

Assignment was successfull

Environment { id: 12, stack_len: 13, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(24))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 442


Env 12 popped:

Environment { id: 12, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(24))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 448


Env 12 popped:

Environment { id: 12, stack_len: 11, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 450


Trying to assign value 'CInt(120)' to variable 'm'...

Assignment was successfull

Environment { id: 11, stack_len: 10, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(120))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 452


Env 11 popped:

Environment { id: 11, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(120))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 458


Env 11 popped:

Environment { id: 11, stack_len: 8, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 460


Trying to assign value 'CInt(720)' to variable 'm'...

Assignment was successfull

Environment { id: 10, stack_len: 7, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(720))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 462


Env 10 popped:

Environment { id: 10, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(720))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 468


Env 10 popped:

Environment { id: 10, stack_len: 5, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 470


Trying to assign value 'CInt(5040)' to variable 'm'...

Assignment was successfull

Environment { id: 9, stack_len: 4, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(5040))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(7))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 472


Env 9 popped:

Environment { id: 9, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(5040))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(7))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 478


Env 9 popped:

Environment { id: 9, stack_len: 2, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(7))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 480


Trying to assign value 'CInt(5040)' to variable 'a'...

Assignment was successfull

Environment { id: 8, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"a": (true, CInt(5040))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 487


Env 8 popped:

Environment { id: 8, stack_len: 0, current_func: "", output: ["Resultado:", "5040"], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [] }


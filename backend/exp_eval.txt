

-----------------------------------------
            counter: 237


Eval Function Call:

Expression: FuncCall("fatorial", [CInt(7)])

Env: Environment { id: 8, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"a": (true, CInt(0))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 238


In function eval_function_call:

Env: Environment { id: 8, stack_len: 1, current_func: "", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"a": (true, CInt(0))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 239


In function eval_function_call:

Function 'fatorial' successfully found in environment



-----------------------------------------
            counter: 242


In function eval_function_call:

new_env after copying functions and pushing: Environment { id: 9, stack_len: 2, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 244


In function eval_function_call:

new_env after mapping formal args: Environment { id: 9, stack_len: 2, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(7))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 253


Eval EQ:

Expression: EQ(Var("x"), CInt(1))

Env: Environment { id: 9, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(7))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 254


Eval Var:

Expression: Var("x")

Env: Environment { id: 9, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(7))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 259


Eval Mul:

Expression: Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))]))

Env: Environment { id: 9, stack_len: 4, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(7))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 260


Eval Var:

Expression: Var("x")

Env: Environment { id: 9, stack_len: 4, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(7))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 261


Eval Function Call:

Expression: FuncCall("fatorial", [Sub(Var("x"), CInt(1))])

Env: Environment { id: 9, stack_len: 4, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(7))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 262


In function eval_function_call:

Env: Environment { id: 9, stack_len: 4, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(7))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 263


In function eval_function_call:

Function 'fatorial' successfully found in environment



-----------------------------------------
            counter: 266


In function eval_function_call:

new_env after copying functions and pushing: Environment { id: 10, stack_len: 5, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 267


Eval Var:

Expression: Var("x")

Env: Environment { id: 9, stack_len: 4, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(7))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 269


In function eval_function_call:

new_env after mapping formal args: Environment { id: 10, stack_len: 5, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 278


Eval EQ:

Expression: EQ(Var("x"), CInt(1))

Env: Environment { id: 10, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 279


Eval Var:

Expression: Var("x")

Env: Environment { id: 10, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 284


Eval Mul:

Expression: Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))]))

Env: Environment { id: 10, stack_len: 7, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 285


Eval Var:

Expression: Var("x")

Env: Environment { id: 10, stack_len: 7, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 286


Eval Function Call:

Expression: FuncCall("fatorial", [Sub(Var("x"), CInt(1))])

Env: Environment { id: 10, stack_len: 7, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 287


In function eval_function_call:

Env: Environment { id: 10, stack_len: 7, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 288


In function eval_function_call:

Function 'fatorial' successfully found in environment



-----------------------------------------
            counter: 291


In function eval_function_call:

new_env after copying functions and pushing: Environment { id: 11, stack_len: 8, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 292


Eval Var:

Expression: Var("x")

Env: Environment { id: 10, stack_len: 7, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 294


In function eval_function_call:

new_env after mapping formal args: Environment { id: 11, stack_len: 8, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 303


Eval EQ:

Expression: EQ(Var("x"), CInt(1))

Env: Environment { id: 11, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 304


Eval Var:

Expression: Var("x")

Env: Environment { id: 11, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 309


Eval Mul:

Expression: Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))]))

Env: Environment { id: 11, stack_len: 10, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 310


Eval Var:

Expression: Var("x")

Env: Environment { id: 11, stack_len: 10, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 311


Eval Function Call:

Expression: FuncCall("fatorial", [Sub(Var("x"), CInt(1))])

Env: Environment { id: 11, stack_len: 10, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 312


In function eval_function_call:

Env: Environment { id: 11, stack_len: 10, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 313


In function eval_function_call:

Function 'fatorial' successfully found in environment



-----------------------------------------
            counter: 316


In function eval_function_call:

new_env after copying functions and pushing: Environment { id: 12, stack_len: 11, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 317


Eval Var:

Expression: Var("x")

Env: Environment { id: 11, stack_len: 10, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 319


In function eval_function_call:

new_env after mapping formal args: Environment { id: 12, stack_len: 11, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 328


Eval EQ:

Expression: EQ(Var("x"), CInt(1))

Env: Environment { id: 12, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 329


Eval Var:

Expression: Var("x")

Env: Environment { id: 12, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 334


Eval Mul:

Expression: Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))]))

Env: Environment { id: 12, stack_len: 13, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 335


Eval Var:

Expression: Var("x")

Env: Environment { id: 12, stack_len: 13, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 336


Eval Function Call:

Expression: FuncCall("fatorial", [Sub(Var("x"), CInt(1))])

Env: Environment { id: 12, stack_len: 13, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 337


In function eval_function_call:

Env: Environment { id: 12, stack_len: 13, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 338


In function eval_function_call:

Function 'fatorial' successfully found in environment



-----------------------------------------
            counter: 341


In function eval_function_call:

new_env after copying functions and pushing: Environment { id: 13, stack_len: 14, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 342


Eval Var:

Expression: Var("x")

Env: Environment { id: 12, stack_len: 13, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 344


In function eval_function_call:

new_env after mapping formal args: Environment { id: 13, stack_len: 14, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 353


Eval EQ:

Expression: EQ(Var("x"), CInt(1))

Env: Environment { id: 13, stack_len: 15, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 354


Eval Var:

Expression: Var("x")

Env: Environment { id: 13, stack_len: 15, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 359


Eval Mul:

Expression: Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))]))

Env: Environment { id: 13, stack_len: 16, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 360


Eval Var:

Expression: Var("x")

Env: Environment { id: 13, stack_len: 16, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 361


Eval Function Call:

Expression: FuncCall("fatorial", [Sub(Var("x"), CInt(1))])

Env: Environment { id: 13, stack_len: 16, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 362


In function eval_function_call:

Env: Environment { id: 13, stack_len: 16, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 363


In function eval_function_call:

Function 'fatorial' successfully found in environment



-----------------------------------------
            counter: 366


In function eval_function_call:

new_env after copying functions and pushing: Environment { id: 14, stack_len: 17, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 367


Eval Var:

Expression: Var("x")

Env: Environment { id: 13, stack_len: 16, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 369


In function eval_function_call:

new_env after mapping formal args: Environment { id: 14, stack_len: 17, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 378


Eval EQ:

Expression: EQ(Var("x"), CInt(1))

Env: Environment { id: 14, stack_len: 18, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 379


Eval Var:

Expression: Var("x")

Env: Environment { id: 14, stack_len: 18, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 384


Eval Mul:

Expression: Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))]))

Env: Environment { id: 14, stack_len: 19, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 385


Eval Var:

Expression: Var("x")

Env: Environment { id: 14, stack_len: 19, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 386


Eval Function Call:

Expression: FuncCall("fatorial", [Sub(Var("x"), CInt(1))])

Env: Environment { id: 14, stack_len: 19, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 387


In function eval_function_call:

Env: Environment { id: 14, stack_len: 19, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 388


In function eval_function_call:

Function 'fatorial' successfully found in environment



-----------------------------------------
            counter: 391


In function eval_function_call:

new_env after copying functions and pushing: Environment { id: 15, stack_len: 20, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 392


Eval Var:

Expression: Var("x")

Env: Environment { id: 14, stack_len: 19, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 394


In function eval_function_call:

new_env after mapping formal args: Environment { id: 15, stack_len: 20, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 403


Eval EQ:

Expression: EQ(Var("x"), CInt(1))

Env: Environment { id: 15, stack_len: 21, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 404


Eval Var:

Expression: Var("x")

Env: Environment { id: 15, stack_len: 21, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(0))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 415


Eval Var:

Expression: Var("m")

Env: Environment { id: 15, stack_len: 21, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(1))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 425


Eval Var:

Expression: Var("m")

Env: Environment { id: 14, stack_len: 18, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(2))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 435


Eval Var:

Expression: Var("m")

Env: Environment { id: 13, stack_len: 15, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(3))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 445


Eval Var:

Expression: Var("m")

Env: Environment { id: 12, stack_len: 12, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(24))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(4))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 455


Eval Var:

Expression: Var("m")

Env: Environment { id: 11, stack_len: 9, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(120))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(5))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 465


Eval Var:

Expression: Var("m")

Env: Environment { id: 10, stack_len: 6, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(720))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(6))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 475


Eval Var:

Expression: Var("m")

Env: Environment { id: 9, stack_len: 3, current_func: "fatorial", output: [], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"m": (true, CInt(5040))}, functions: {}, adts: {} }, Scope { variables: {"x": (false, CInt(7))}, functions: {}, adts: {} }, Scope { variables: {}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }



-----------------------------------------
            counter: 485


Eval Var:

Expression: Var("a")

Env: Environment { id: 8, stack_len: 1, current_func: "", output: ["Resultado:"], globals: Scope { variables: {}, functions: {}, adts: {} }, stack: [Scope { variables: {"a": (true, CInt(5040))}, functions: {"fatorial": Function { name: "fatorial", kind: TInteger, params: [FormalArgument { argument_name: "x", argument_type: TInteger }], body: Some(Block([VarDeclaration("m", CInt(0)), IfThenElse(EQ(Var("x"), CInt(1)), Block([Assignment("m", CInt(1))]), Some(Block([Assignment("m", Mul(Var("x"), FuncCall("fatorial", [Sub(Var("x"), CInt(1))])))]))), Return(Var("m"))])) }}, adts: {} }] }

